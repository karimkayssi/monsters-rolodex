{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","name","email","CardList","monsters","map","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBACEC,IAAI,UAEJC,IAAK,mEAET,mCAAMH,EAAMI,QAAQC,KAApB,OACA,4BAAIL,EAAMI,QAAQE,YCNXC,G,MAAW,SAACP,GAErB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQM,WCPtBC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCqFCG,G,wDAhFb,aAAe,IAAD,8BACZ,gBA8BFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SA7BrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,qDAYd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAqB/C,WAGE,MAAkCC,KAAKN,MAA/Bd,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,YAKZU,EAAmBrB,EAASsB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQC,KAAK0B,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UAEE,kDAUA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUL,SAAUqB,IAUU,KAA3BD,KAAKN,MAAMH,aAAsB,+C,GA3ExBc,cCDHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAQ1BZ,M","file":"static/js/main.b6e3037f.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img \n          alt=\"monster\"\n          // eslint-disable-next-line \n          src={'https://robohash.org/${props.monster.id}?set=set2&size=180x180'} \n        />\n      <h2> {props.monster.name} </h2>\n      <p>{props.monster.email}</p>\n    </div>\n);","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\nexport const CardList = (props) => {\n    //console.log(props);\n    return (\n        <div className='card-list'>\n            {props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster} />\n            ))}\n        </div>\n    );\n};","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input\n    className='search'\n    type='search'\n    placeholder= {placeholder} \n    onChange={handleChange}\n    />\n)","//import * as React from \"react\";\n//import axios from 'axios';\nimport React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from  './components/search-box/search-box.component';\nimport './App.css';\n\n\n// function App() {\n//ยง   return (\n//    <div></div>\n//   );\n// }\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n  //this.handleChange = this.handleChange.bind(this);\n\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  // fetchRandomData = () => {\n  //   this.setState({ counter: this.state.counter + 1 })\n  //   return axios.get(`https://jsonplaceholder.typicode.com/users`)\n  //     .then(res => {\n  //       console.log(res);\n  //       return res;\n  //     })\n  //     .catch(err => { \n  //       console.error(err);\n  //     });\n  //state = { counter: 0 }\n\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n\nrender() {\n \n  //Destructuring\n  const { monsters, searchField } = this.state;\n  //This is equivalent to:\n  // const monsters = this.state.monsters;\n  // const searchField = this.state.searchField;\n  // But is just easier and quicker to write this out\n  const filteredMonsters = monsters.filter(monster =>\n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n  return (\n    <div className='App'>\n\n      <h1>Monsters Rolodex</h1>\n\n      {/* <input\n      type='search'\n      placeholder='Search monsters' \n      onChange={ e => { this.setState({searchField: e.target.value})}}\n      //   , () => console.log(this.state)\n      //   );\n      //   }}\n      /> */}\n      <SearchBox \n      placeholder='Search monsters' \n      handleChange={this.handleChange}\n      />\n      <CardList monsters={filteredMonsters} />\n      {/* <header className=\"App-header\">\n          <p>\n            {this.state.counter}\n          </p>\n          <button onClick={() => {\n            this.fetchRandomData();\n          }}>Fetch Random Data</button>\n        </header> */}\n\n        {this.state.searchField === \"\" && <div>empty</div>}\n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}